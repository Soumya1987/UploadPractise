'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _services = require('../../../config/wdio/services.default-config');

var _services2 = _interopRequireDefault(_services);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global browser, axe */
var axeCoreSrc = void 0;

/**
* Webdriver.io AxeService
* provides the browser.axe() command.
*/

var AxeService = function () {
  function AxeService() {
    (0, _classCallCheck3.default)(this, AxeService);
  }

  (0, _createClass3.default)(AxeService, [{
    key: 'before',

    // eslint-disable-next-line class-methods-use-this
    value: function before() {
      browser.addCommand('axe', function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        // Conditionally inject axe. This allows consumers to inject it themselves
        // in the test examples which would slightly speed up test runs.
        var axeConfig = (0, _extends3.default)({}, _services2.default.axe, browser.options.axe || {});
        if (axeConfig.inject) {
          if (browser.execute('return window.axe === undefined;')) {
            if (!axeCoreSrc) {
              axeCoreSrc = _fs2.default.readFileSync(require.resolve('axe-core'), 'utf8');
              axeCoreSrc = axeCoreSrc.replace(/^\/\*.*\*\//, '');

              var _axeOptions = axeConfig.options;
              if (_axeOptions) {
                var axeJsonConfigure = 'axe.configure(' + (0, _stringify2.default)(_axeOptions) + ')';
                axeCoreSrc = axeCoreSrc + '\n' + axeJsonConfigure + ';';
              }
            }
            browser.execute(axeCoreSrc);
          }
        }

        var currentViewportSize = browser.getViewportSize();
        // use current viewport if none specified
        var specifiedViewports = options.viewports || [currentViewportSize];
        var axeOptions = {
          runOnly: options.runOnly,
          rules: options.rules
        };

        // Get accessibility results for each viewport size
        var results = specifiedViewports.map(function (viewport) {
          browser.setViewportSize(viewport);
          // Avoid arrow callback syntax as this function is injected into the browser
          // eslint-disable-next-line func-names, prefer-arrow-callback
          return browser.executeAsync(function (context, opts, done) {
            // eslint-disable-next-line func-names, prefer-arrow-callback
            axe.run(context || document, opts, function (error, result) {
              done({
                // eslint-disable-next-line object-shorthand
                error: error,
                // eslint-disable-next-line object-shorthand
                result: result
              });
            });
          }, options.context, axeOptions).value;
        });

        // set viewport back
        browser.setViewportSize(currentViewportSize);
        return results;
      });
    }
  }]);
  return AxeService;
}();

exports.default = AxeService;