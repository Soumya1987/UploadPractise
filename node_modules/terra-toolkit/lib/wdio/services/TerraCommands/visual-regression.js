'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Helper method to determine the screenshot tag name, the element selector, the viewport(s)
* in which to take the screenshots, as well as the capture screenshot options to be passed
* to the wdio-visual-regression-service comparison methods. Currently supported VR comparision
* options are:
*     - viewports: [{ width: Number, height: Number }]
*     - misMatchTolerance: Number
*     - viewportChangePause: Number
* @property {Array} args - The list of test arguments to parse.
*/
var determineScreenshotOptions = function determineScreenshotOptions() {
  var param1 = arguments.length ? arguments.length <= 0 ? undefined : arguments[0] : undefined;
  var param2 = arguments.length > 1 ? arguments.length <= 1 ? undefined : arguments[1] : undefined;

  var name = 'default';
  var options = {};
  if (typeof param1 === 'string') {
    name = param1;
    options = (typeof param2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(param2)) === 'object' && !Array.isArray(param2) ? param2 : options;
  } else {
    options = (typeof param1 === 'undefined' ? 'undefined' : (0, _typeof3.default)(param1)) === 'object' && !Array.isArray(param1) ? param1 : options;
  }

  // Check if custom selector should be used, otherwise use the global value.
  var selector = options.selector || global.browser.options.terra.selector;

  var compareOptions = {};

  // Which viewports the screenshoot should adjust to & take screenshot. Supplying [] results in current viewport size.
  compareOptions.viewports = options.viewports || [];

  // Check if custom misMatchTolerance should be used, otherwise use the global value.
  compareOptions.misMatchTolerance = options.misMatchTolerance || global.browser.options.visualRegression.compare.misMatchTolerance;

  // Check if custom viewportChangePause should be used, otherwise use the global value.
  compareOptions.viewportChangePause = options.viewportChangePause || global.browser.options.visualRegression.viewportChangePause;

  return { name: name, selector: selector, options: compareOptions };
};

/**
* Generates a test for each themed property given and runs a screenshot assertion.
* @property {Array} args - An object containing the CSS custom properties to assert.
*/
var themeEachCustomProperty = function themeEachCustomProperty() {
  var _ref;

  if (global.browser.options.terra.disableThemeTests) {
    return;
  }

  // If more than 1 argument, selector is first
  var selector = arguments.length > 1 ? arguments.length <= 0 ? undefined : arguments[0] : global.browser.options.terra.selector;
  // Style properties are always last.
  var styleProperties = (_ref = arguments.length - 1, arguments.length <= _ref ? undefined : arguments[_ref]);

  (0, _entries2.default)(styleProperties).forEach(function (_ref2) {
    var _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
        key = _ref3[0],
        value = _ref3[1];

    global.it('themed [' + key + ']', function () {
      global.browser.execute('document.documentElement.style.setProperty(\'' + key + '\', \'' + value + '\')');
      global.expect(global.browser.checkElement(selector)).to.matchReference();
    });
  });
};

/**
* Generates a test for a combination of themed properties given and runs a screenshot assertion.
*
* @property {Array} args - An object containing the options for themeCombinationOfCustomProperties and  CSS custom properties to assert.
*/
var themeCombinationOfCustomProperties = function themeCombinationOfCustomProperties() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (global.browser.options.terra.disableThemeTests) {
    return;
  }

  var selector = args[0].selector ? args[0].selector : global.browser.options.terra.selector;
  var styleProperties = args[0].properties ? args[0].properties : [];

  if (!args[0].testName) {
    throw new Error('A test name for themeCombinationOfCustomProperties test is not provided.\nA testName property should be set in the options object passed to the themeCombinationOfCustomProperties to uniquely identify it.');
  }

  global.it('[' + args[0].testName + ']', function () {
    (0, _entries2.default)(styleProperties).forEach(function (_ref4) {
      var _ref5 = (0, _slicedToArray3.default)(_ref4, 2),
          key = _ref5[0],
          value = _ref5[1];

      global.browser.execute('document.documentElement.style.setProperty(\'' + key + '\', \'' + value + '\')');
    });
    global.expect(global.browser.checkElement(selector)).to.matchReference();
  });
};

/** Helper method to create a useful test descripton.
  * @property {String} matchType - Specifies the type of matchReference assertion. Either 'withinTolerance'
  *   or 'exactly'.
  */
var getTestDescription = function getTestDescription(matchType) {
  return matchType === 'withinTolerance' ? 'be within the mismatch tolerance' : 'match screenshot exactly';
};

/**
* A mocha-chai convenience test case to determines the screenshot options and test names needed to
* capture screenshots of a specified element and assert the screenshot comparision results are
* either within the mismatch tolerance or are an exact match.
* @property {Array} testArguments - The test arguments passed to the `matchScreenshotWithinTolerance`
*    or `matchScreenshotExactly` methods.
* @property {String} matchType - Specifies the type of matchReference assertion. Either 'withinTolerance'
*    or 'exactly'.
*/
var matchScreenshot = function matchScreenshot(testArguments, matchType) {
  var _determineScreenshotO = determineScreenshotOptions.apply(undefined, (0, _toConsumableArray3.default)(testArguments)),
      name = _determineScreenshotO.name,
      selector = _determineScreenshotO.selector,
      options = _determineScreenshotO.options;

  var testDescription = getTestDescription(matchType);
  global.it('[' + name + '] to ' + testDescription, function () {
    var screenshots = global.browser.checkElement(selector, options);

    var viewports = options.viewports;
    if (viewports.length) {
      global.expect(screenshots, 'the number of screenshot results to match the number of specified viewports').to.have.lengthOf(viewports.length);
      viewports.forEach(function (viewport, index) {
        screenshots[index].viewport = viewport.name;
      });
    }

    global.expect(screenshots).to.matchReference(matchType);
  });
};

/**
* Mocha-chai wrapper method to capture screenshots of a specified element and assert the
* screenshot comparision results are within the mismatch tolerance.
* @property {Array} args - The list of test arguments to parse. Accepted Arguments:
*    - String (optional): the test case name. Default name is 'default'
*    - Object (optional): the test options. Options include selector, viewports,
*        misMatchTolerance and viewportChangePause.
*    Note: args list order should be: name, then options when using both.
*/
var matchScreenshotWithinTolerance = function matchScreenshotWithinTolerance() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  matchScreenshot(args, 'withinTolerance');
};

var methods = {
  matchScreenshotWithinTolerance: matchScreenshotWithinTolerance,
  themeEachCustomProperty: themeEachCustomProperty,
  themeCombinationOfCustomProperties: themeCombinationOfCustomProperties,
  getTestDescription: getTestDescription
};

exports.default = methods;