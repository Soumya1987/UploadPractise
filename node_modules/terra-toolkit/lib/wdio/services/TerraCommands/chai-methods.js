'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _visualRegression = require('./visual-regression');

var _visualRegression2 = _interopRequireDefault(_visualRegression);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
  * A accessible chai assertion to be paired with browser.axe() tests.
  */
function accessible() {
  // eslint-disable-next-line no-underscore-dangle
  new _chai2.default.Assertion(this._obj).to.be.instanceof(Array);
  // eslint-disable-next-line no-underscore-dangle
  var errors = this._obj.filter(function (test) {
    return test.result;
  }).reduce(function (all, test) {
    return all.concat(test.result.violations);
  }, []).filter(function (test) {
    return test;
  }).map(function (test) {
    return '' + (0, _stringify2.default)(test, null, 2);
  });

  this.assert(errors.length === 0, 'expected no accessibility violations but got:\n\t' + errors[0], 'expected accessibilty errors but received none');
}

/** Helper method to determine which comparision results are relevant if the chai
  * screenshot assertion fails.
  * @property {Array of Objects} screenshots - The list of comparision results. The results
  *    contain: misMatchPercentage (number), isSameDimensions (bool), isWithinMisMatchTolerance
  *    (bool) and isExactSameImage (bool).
  * @property {bool} matchExactly - If the screenshots should be an exact match.
  */
var getComparisonResults = function getComparisonResults(screenshots, matchExactly) {
  return screenshots.map(function (comparison) {
    var viewport = comparison.viewport,
        misMatchPercentage = comparison.misMatchPercentage,
        isSameDimensions = comparison.isSameDimensions,
        isExactSameImage = comparison.isExactSameImage;

    var relevantInformation = {};

    if (viewport) {
      relevantInformation.viewport = viewport;
    }

    if (!isSameDimensions) {
      relevantInformation.isSameDimensions = isSameDimensions;
    }

    if (matchExactly) {
      relevantInformation.isExactSameImage = isExactSameImage;
    }

    relevantInformation.misMatchPercentage = misMatchPercentage;

    return '' + (0, _stringify2.default)(relevantInformation, null, 2);
  });
};

/** A visual regression chai assertion to be paired with browser.capture() visual regression tests.
  * Checks if the screenshot(s) are the same size and verifies the screenshots are either within
  * the mismatch tolerance match or an exact match.
  * @property {String} matchType - Which assertion to make. Either 'withinTolerance' or 'exactly'.
  *     Defaults to 'withinTolerance'.
  */
function matchReference() {
  var matchType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'withinTolerance';

  // eslint-disable-next-line no-underscore-dangle
  new _chai2.default.Assertion(this._obj).to.be.instanceof(Array);

  if (matchType) {
    new _chai2.default.Assertion(matchType).to.be.oneOf(['withinTolerance', 'exactly']);
  }

  // eslint-disable-next-line no-underscore-dangle
  var screenshots = this._obj;
  var matchExactly = matchType === 'exactly';

  var testDescription = _visualRegression2.default.getTestDescription(matchType);
  var comparisonResults = getComparisonResults(screenshots, matchExactly);

  var imagesMatch = void 0;
  if (matchExactly) {
    imagesMatch = screenshots.every(function (screenshot) {
      return screenshot && screenshot.isSameDimensions && screenshot.isExactSameImage;
    });
  } else {
    imagesMatch = screenshots.every(function (screenshot) {
      return screenshot && screenshot.isSameDimensions && screenshot.isWithinMisMatchTolerance;
    });
  }

  this.assert(imagesMatch === true, 'expected to ' + testDescription + ', but received the following comparison results \n' + comparisonResults, 'did not expected to ' + testDescription + ', but received the following comparison results \n' + comparisonResults);
}

var chaiMedthods = {
  accessible: accessible,
  matchReference: matchReference
};

exports.default = chaiMedthods;