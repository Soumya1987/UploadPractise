'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiMethods = require('./TerraCommands/chai-methods');

var _chaiMethods2 = _interopRequireDefault(_chaiMethods);

var _accessiblity = require('./TerraCommands/accessiblity');

var _accessiblity2 = _interopRequireDefault(_accessiblity);

var _visualRegression = require('./TerraCommands/visual-regression');

var _visualRegression2 = _interopRequireDefault(_visualRegression);

var _services = require('../../../config/wdio/services.default-config');

var _services2 = _interopRequireDefault(_services);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VIEWPORTS = _services2.default.terraViewports;

/**
* Convenience method for getting viewports by name.
* @param sizes - [String] of viewport sizes.
* @return [Object] of viewport sizes.
*/

var getViewports = function getViewports() {
  for (var _len = arguments.length, sizes = Array(_len), _key = 0; _key < _len; _key++) {
    sizes[_key] = arguments[_key];
  }

  var viewportSizes = (0, _keys2.default)(VIEWPORTS);
  if (sizes.length) {
    viewportSizes = sizes;
  }
  return viewportSizes.map(function (size) {
    return VIEWPORTS[size];
  });
};

/**
* Sets the viewport for the test run if the formFactor config is defined.
* @param formFactor - [String] the viewport size.
*/
var setViewport = function setViewport(formFactor) {
  if (formFactor) {
    var terraViewport = VIEWPORTS[formFactor];
    if (terraViewport !== undefined && (typeof terraViewport === 'undefined' ? 'undefined' : (0, _typeof3.default)(terraViewport)) === 'object') {
      global.browser.setViewportSize(terraViewport);
    } else {
      throw new Error('The formFactor supplied is not a Terra-defined viewport size.');
    }
  }
};

/**
* Webdriver.io TerraService
* Provides global access to chia, as well as custom chai assertions.
* Also provides access a global instance of the Terra object which
* provides accessibliy and visual regression test steps.
*/

var TerraService = function () {
  function TerraService() {
    (0, _classCallCheck3.default)(this, TerraService);
  }

  (0, _createClass3.default)(TerraService, [{
    key: 'before',

    // eslint-disable-next-line class-methods-use-this
    value: function before() {
      _chai2.default.config.showDiff = false;
      global.expect = _chai2.default.expect;
      global.should = _chai2.default.should();
      global.Terra = {
        viewports: getViewports,
        should: {
          beAccessible: _accessiblity2.default.beAccessible,
          matchScreenshot: _visualRegression2.default.matchScreenshotWithinTolerance,
          themeEachCustomProperty: _visualRegression2.default.themeEachCustomProperty,
          themeCombinationOfCustomProperties: _visualRegression2.default.themeCombinationOfCustomProperties
        }
      };
      _chai2.default.Assertion.addMethod('accessible', _chaiMethods2.default.accessible);
      _chai2.default.Assertion.addMethod('matchReference', _chaiMethods2.default.matchReference);
      // IE driver takes a longer to be ready for browser interactions
      if (global.browser.desiredCapabilities.browserName === 'internet explorer') {
        global.browser.pause(10000);
      }
      setViewport(global.browser.options.formFactor);
    }
  }]);
  return TerraService;
}();

exports.default = TerraService;