'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _ip = require('ip');

var _ip2 = _interopRequireDefault(_ip);

var _SeleniumDockerService = require('../wdio/services/SeleniumDockerService');

var _SeleniumDockerService2 = _interopRequireDefault(_SeleniumDockerService);

var _ServeStaticService = require('../wdio/services/ServeStaticService');

var _ServeStaticService2 = _interopRequireDefault(_ServeStaticService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var port = 8080; /* eslint import/no-extraneous-dependencies: ["error", {"devDependencies": true}] */


var seleniumPort = 4444;
var seleniumHost = _ip2.default.address();

var nightwatchConfig = function nightwatchConfig(webpackConfig, srcFolders, providedPort) {
  // eslint-disable-next-line no-console
  console.warn('WARNING: WebdriverIO should be used instead of Nightwatch.  Nightwatch will be deprecated in the future.');

  if (providedPort) {
    port = providedPort;
  }

  var seleniumDocker = new _SeleniumDockerService2.default();
  var expressDevService = new _ServeStaticService2.default();

  var startDriverAndServer = function startDriverAndServer(done) {
    var webPackPromise = expressDevService.onPrepare({
      webpackConfig: webpackConfig,
      serveStatic: { port: port }
    });

    var dockerPromise = seleniumDocker.onPrepare({
      host: seleniumHost,
      port: seleniumPort,
      path: '/wd/hub',
      seleniumDocker: {
        enabled: !process.env.TRAVIS && !process.env.CI
      }
    }, [{ browserName: 'chrome' }]);

    _promise2.default.all([webPackPromise, dockerPromise]).then(done);
  };

  var stopDriverAndServer = function stopDriverAndServer(done) {
    _promise2.default.all([expressDevService.onComplete(), seleniumDocker.onComplete()]).then(done);
  };

  var endBrowserSession = function endBrowserSession(browser, done) {
    return browser.end(done);
  };

  var config = {
    selenium: {
      start_process: false
    },
    src_folders: srcFolders,
    output_folder: 'reports',
    custom_commands_path: '',
    custom_assertions_path: '',
    page_objects_path: '',
    persist_globals: true,
    test_workers: false,
    detailed_output: !process.env.TRAVIS && !process.env.CI,
    test_settings: {
      default: {
        launch_url: 'http://' + _ip2.default.address() + ':' + port,
        persist_globals: true,
        selenium_port: seleniumPort,
        selenium_host: process.env.TRAVIS || process.env.CI ? 'standalone-chrome' : seleniumHost,
        silent: true,
        globals: {
          breakpoints: {
            tiny: [470, 768],
            small: [622, 768],
            medium: [838, 768],
            large: [1000, 768],
            huge: [1300, 768],
            enormous: [1500, 768]
          },
          asyncHookTimeout: 30000,
          waitForConditionTimeout: 1000,
          retryAssertionTimeout: 1000,
          before: startDriverAndServer,
          after: stopDriverAndServer,
          afterEach: endBrowserSession
        },
        filter: '**/*-spec.js',
        screenshots: {
          enabled: true,
          on_failure: true,
          on_error: true,
          path: './screenshots'
        },
        desiredCapabilities: {
          browserName: 'chrome',
          javascriptEnabled: true,
          acceptSslCerts: true
        }
      }
    }
  };
  return config;
};

exports.default = nightwatchConfig;